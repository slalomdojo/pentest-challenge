variable "password_endpoint" { type = "string" }
variable "vpc_cidr" { type = "string" }
variable "subnet_cidr" { type = "string" }
variable "region" { type = "string" }
variable "az" { type = "string" }
variable "target_ip_address" { type = "string" }

variable "workstation_ip" { 
  type = "string" 
  default = "0.0.0.0/0"
}

variable "number_of_teams" { 
  type = "string" 
  default = "1"
}

variable "kali_amis" {
  type = "map"
  default = {
    us-east-1 = "ami-07360d1b1c9e13198"
    us-east-2 = "ami-0b2b9a650987b7d0c"
  }
}

provider "aws" {
  region = "${var.region}"
}

#################
# N E T W O R K #
#################

resource "aws_vpc" "vpc" {
  cidr_block           = "${var.vpc_cidr}"
  enable_dns_support   = true
  enable_dns_hostnames = true

  tags {
      Name = "DevOps Dojo PenTest"
      Project = "DevOps Dojo"
  }

  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_internet_gateway" "igw" {
  vpc_id = "${aws_vpc.vpc.id}"

  tags {
      Project = "DevOps Dojo"
  }
}

resource "aws_subnet" "public-subnet" {
  vpc_id            = "${aws_vpc.vpc.id}"
  cidr_block        = "${var.subnet_cidr}"
  availability_zone = "${var.az}"
  map_public_ip_on_launch = true

  tags {
      Project = "DevOps Dojo"
  }

  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_route_table" "public-route-table" {
  vpc_id = "${aws_vpc.vpc.id}"

  tags {
    Project = "DevOps Dojo"
  }
}

resource "aws_route" "public_outbound" {
    route_table_id = "${aws_route_table.public-route-table.id}"
    destination_cidr_block = "0.0.0.0/0"
    gateway_id = "${aws_internet_gateway.igw.id}"
    depends_on = ["aws_route_table.public-route-table"]
}

resource "aws_route_table_association" "route-table-association" {
  subnet_id      = "${aws_subnet.public-subnet.id}"
  route_table_id = "${aws_route_table.public-route-table.id}"
}

#############################
# T A R G E T   S E R V E R #
#############################

resource "aws_security_group" "target_sg" {
  description = "Security group for the target server"
  vpc_id      = "${aws_vpc.vpc.id}"

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags {
      Project = "DevOps Dojo"
  }
}

resource "aws_security_group_rule" "target_sg_nodejs_api_access" {
  description              = "Allow attackers to reach to the Node.js API"
  from_port                = 3000
  protocol                 = "tcp"
  security_group_id        = "${aws_security_group.target_sg.id}"
  cidr_blocks = ["${var.vpc_cidr}"]
  to_port                  = 3000
  type                     = "ingress"
}

resource "aws_security_group_rule" "target_sg_heartbleed_access" {
  description              = "Allow attackers to reach to the Heartbleed Docker container"
  from_port                = 8443
  protocol                 = "tcp"
  security_group_id        = "${aws_security_group.target_sg.id}"
  cidr_blocks = ["${var.vpc_cidr}"]
  to_port                  = 8443
  type                     = "ingress"
}

resource "aws_security_group_rule" "target_sg_nginx_http_access" {
  description              = "Allow attackers to reach to the Nginx server (HTTP)"
  from_port                = 80
  protocol                 = "tcp"
  security_group_id        = "${aws_security_group.target_sg.id}"
  cidr_blocks = ["${var.vpc_cidr}"]
  to_port                  = 80
  type                     = "ingress"
}

resource "aws_security_group_rule" "target_sg_nginx_https_access" {
  description              = "Allow attackers to reach to the Nginx server (HTTPS)"
  from_port                = 443
  protocol                 = "tcp"
  security_group_id        = "${aws_security_group.target_sg.id}"
  cidr_blocks = ["${var.vpc_cidr}"]
  to_port                  = 443
  type                     = "ingress"
}

data "aws_ami" "ubuntu" {
  most_recent = true

  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  owners = ["099720109477"] # Canonical
}

resource "aws_eip" "target_eip" {
  vpc = true
  instance = "${aws_instance.target.id}"
}

data "template_file" "target_userdata" {
  template = "${file("${path.module}/target-user-data.tpl")}"

  vars {
    password_endpoint = "${var.password_endpoint}"
  }
}

resource "aws_instance" "target" {
  ami           = "${data.aws_ami.ubuntu.id}"
  instance_type = "t2.micro"
  subnet_id     = "${aws_subnet.public-subnet.id}"
  user_data = "${data.template_file.target_userdata.rendered}"
  vpc_security_group_ids = ["${aws_security_group.target_sg.id}"]
  private_ip = "172.21.0.24"
  key_name = "${aws_key_pair.attacker_key.key_name}"

  tags {
    Name = "Target Server"
    Project = "DevOps Dojo"
  }
}

###################
# A T T A C K E R #
###################

resource "aws_security_group" "attacker_sg" {
  description = "Security group for the attacker server"
  vpc_id      = "${aws_vpc.vpc.id}"

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags {
      Project = "DevOps Dojo"
  }
}

resource "aws_security_group_rule" "attacker_sg_nodejs_api_access" {
  description              = "Allow attackers to reach to the Node.js API"
  from_port                = 22
  protocol                 = "tcp"
  security_group_id        = "${aws_security_group.attacker_sg.id}"
  cidr_blocks              = ["${var.workstation_ip}"]
  to_port                  = 22
  type                     = "ingress"
}

resource "aws_eip" "attacker_eip" {
  vpc = true
  instance = "${element(aws_instance.attacker.*.id, count.index)}"
  count = "${var.number_of_teams}"
  
  tags {
    Team = "Team ${1 + count.index}"
  }
}

resource "tls_private_key" "ssh_key" {
  algorithm = "RSA"
  rsa_bits  = 4096
}

resource "aws_key_pair" "attacker_key" {
  key_name   = "attacker-key"
  public_key = "${tls_private_key.ssh_key.public_key_openssh}"
}

resource "aws_instance" "attacker" {
  ami           = "${var.kali_amis[var.region]}"
  instance_type = "t2.medium"
  subnet_id     = "${aws_subnet.public-subnet.id}"
  private_ip = "172.21.0.${31 + count.index}"
  count = "${var.number_of_teams}"
  key_name = "${aws_key_pair.attacker_key.key_name}"
  vpc_security_group_ids = ["${aws_security_group.attacker_sg.id}"]

  tags {
    Name = "Attacker Server - Team ${count.index + 1}"
    Project = "DevOps Dojo"
  }
}

locals {
  attacker-user-data = <<ATTACKERUSERDATA
#!/bin/sh

while true; do
	curl ${var.target_ip_address}:3000${var.password_endpoint}
	sleep 3
done
ATTACKERUSERDATA
}

#################################
# S E C R E T S   M A N A G E R #
#################################

resource "aws_secretsmanager_secret" "ssh_key_private" {
  name                    = "/dojo/pentest/key-pair/private"
  description             = "The SSH Private key"
  recovery_window_in_days = 0
}

resource "aws_secretsmanager_secret_version" "ssh_key_private" {
  secret_id     = "${aws_secretsmanager_secret.ssh_key_private.id}"
  secret_string = "${tls_private_key.ssh_key.private_key_pem}"
}

resource "aws_secretsmanager_secret" "ssh_key_public" {
  name                    = "/dojo/pentest/key-pair/public"
  description             = "The SSH Public key"
  recovery_window_in_days = 0
}

resource "aws_secretsmanager_secret_version" "ssh_key_public" {
  secret_id     = "${aws_secretsmanager_secret.ssh_key_public.id}"
  secret_string = "${tls_private_key.ssh_key.public_key_openssh}"
}

###############
# O U T P U T #
###############

output "attacker_user_data" {
  value = "${local.attacker-user-data}"
}

output "attacker_ssh_private_key" {
  value = "${tls_private_key.ssh_key.private_key_pem}"
  sensitive = true
}

output "attacker_eip" {
  value = ["${aws_eip.attacker_eip.*.public_ip}"]
}

output "target_eip" {
  value = "${aws_eip.target_eip.public_ip}"
}

output "target_private_ip" {
  value = "${aws_instance.target.private_ip}"
}
