#!/bin/bash

db_root_pwd="r00tpAssw0rd"
db_nodejs_pwd="n0d3jspAssw0rd"
db_seed_path="/root/seed.sql"
password="THISISTHEPASSWORD"

# Install AWS CLI
apt-get update
apt-get install awscli -y

# Generate self-signed SSL certificate
mkdir -p /etc/ssl/nginx/
cd /etc/ssl/nginx/
openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 \
    -subj "/C=US/ST=Denial/L=Springfield/O=Dis/CN=pentest.dojo" \
    -keyout pentest.key -out pentest.cert

# Install nginx
add-apt-repository ppa:nginx/stable -y
apt-get update
apt-get install nginx -y
rm -rf /etc/nginx/sites-enabled/*

# Configure nginx
cat > /etc/nginx/nginx.conf <<EOF
user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 768;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    gzip on;

    server {
        listen 443 ssl default_server;
        listen [::]:443 ssl default_server;

        ssl on;
        ssl_certificate /etc/ssl/nginx/pentest.cert;
        ssl_certificate_key /etc/ssl/nginx/pentest.key;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-DES-CBC3-SHA;

        root /var/www/html;
        index index.html index.htm index.nginx-debian.html;
        server_name _;

        location / {
            add_header X-Server-Secret "cGVuZXRyYXRpb250ZXN0aW5n";
            add_header Content-Type text/plain;
            return 200 'Ok';
        }
    }

    server {
        listen 80 default_server;
        listen [::]:80 default_server;

        root /var/www/html;
        index index.html index.htm index.nginx-debian.html;
        server_name _;

        location / {
            add_header X-Server-Secret "cGVuZXRyYXRpb250ZXN0aW5n";
            add_header Content-Type text/plain;
            return 200 'Ok';
        }
    }
}
EOF

service nginx start

# Install MySQL
debconf-set-selections <<< 'mysql-server mysql-server/root_password password r00tpAssw0rd'
debconf-set-selections <<< 'mysql-server mysql-server/root_password_again password r00tpAssw0rd'
apt-get -y install mysql-server

# Configure MySQL
cat > /root/seed.sql <<EOF
CREATE DATABASE IF NOT EXISTS pentest;

USE pentest;

CREATE TABLE IF NOT EXISTS \`USERS\` (
    \`id\` INTEGER auto_increment , 
    \`username\` VARCHAR(255) NOT NULL UNIQUE, 
    \`password\` VARCHAR(255) NOT NULL, 
    \`salt\` TEXT NOT NULL, 
    PRIMARY KEY (\`id\`)
) ENGINE=InnoDB;

INSERT INTO \`USERS\` VALUES (1, "johndoe", "0c6c9a25e6660a7af99c4308a355df3709fbf7ec2294ada37d4a81459eb60b5c", "PBQSVZ");

CREATE USER 'nodejs'@'%' IDENTIFIED BY 'n0d3jspAssw0rd';
GRANT SELECT ON *.* TO 'nodejs'@'%';
EOF

mysql -u root -p$db_root_pwd < $db_seed_path

# Install Docker
apt-get remove docker docker-engine docker.io
apt-get update
apt-get install apt-transport-https ca-certificates curl software-properties-common -y
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
apt-get update
apt-get install docker-ce -y

# Run the Heartbleed vulnerable image
docker run -d -p 8443:443 hmlio/vaas-cve-2014-0160

# Install Node.js & NPM
curl -sL https://deb.nodesource.com/setup_8.x | bash -
apt-get install -y nodejs
npm install -g forever

# Clone the vulnerable Node.js API repo
nodejs_repo_path="/home/ubuntu/nodejs-sql-injection"
git clone https://github.com/thedojoseries/nodejs-sql-injection.git $nodejs_repo_path
cd $nodejs_repo_path && npm install

sed -i "s#__DB_PASSWORD__#$db_nodejs_pwd#g" $nodejs_repo_path/config/config.json
sed -i "s#__PASSWORD__#$password#g" $nodejs_repo_path/config/config.json
sed -i "s#__PASSWORD_ENDPOINT__#${password_endpoint}#g" $nodejs_repo_path/config/config.json

# Install cronjob to start Node.js API
echo "@reboot forever start -o /home/ubuntu/nodejs-output.log $nodejs_repo_path/index.js" > cron
crontab -u ubuntu cron
rm -f cron

# Start the API (the cronjob is just in case the machine reboots in the middle of the event)
forever start -o /home/ubuntu/nodejs-output.log $nodejs_repo_path/index.js
